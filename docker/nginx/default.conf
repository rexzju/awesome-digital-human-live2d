
log_format custom_format '$remote_addr - $remote_user [$time_local] '
                         '"$request" $uri $status $body_bytes_sent $request_time '
                         '"$http_referer" "$http_user_agent" '
                         'request_id=$request_id user_id=$http_user_id';

# HTTP 转 HTTPS 重定向
server {
    listen 80;
    server_name _;
    return 301 https://$host:8443$request_uri;
}

# HTTPS 服务器配置（支持默认443端口和8443端口）
server {
    listen 443 ssl;
    listen 8443 ssl;
    server_name _;
    proxy_set_header Host $host:$server_port;

    # SSL 证书配置
    ssl_certificate /etc/nginx/ssl/cert.pem;
    ssl_certificate_key /etc/nginx/ssl/key.pem;
    
    # SSL 优化配置
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;
    ssl_stapling off;

    access_log /dev/stdout custom_format;

    keepalive_timeout 60s;
    client_header_timeout 60s;
    client_body_timeout 60s;
    send_timeout 10s;
    underscores_in_headers on;
    client_max_body_size 50m;
    client_body_buffer_size 5m;
    # proxy_max_temp_file_size 40960m;
    proxy_http_version 1.1; 

    real_ip_header X-Real-IP;
    set_real_ip_from 127.0.0.1;
    set_real_ip_from unix:;

    proxy_set_header   Host $host;
    proxy_set_header   X-Real-IP $remote_addr;
    proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header   X-Forwarded-Proto $scheme;
    proxy_set_header Connection ""; # 设置 Connection 为长连接
    proxy_cache off; # 关闭缓存
    proxy_buffering off; # 关闭代理缓冲
    chunked_transfer_encoding on; # 开启分块传输编码
    tcp_nopush on; # 开启 TCP NOPUSH 选项，禁止 Nagle 算法
    tcp_nodelay on; # 开启 TCP NODELAY 选项，禁止延迟 ACK 算法

    # 处理OPTIONS预检请求的location
    location / {
        # 先检查是否是OPTIONS请求
        if ($request_method = 'OPTIONS') {
            return 204;
        }
        # 对于正常请求，添加CORS头部并代理到后端
        add_header Access-Control-Allow-Origin * always;
        add_header Access-Control-Allow-Methods 'GET, POST, PUT, DELETE, OPTIONS' always;
        add_header Access-Control-Allow-Headers 'Origin, X-Requested-With, Content-Type, Accept, Authorization, request-id, user-id' always;
        add_header Access-Control-Allow-Credentials 'true' always;
        add_header Access-Control-Max-Age 86400 always;
        proxy_pass         http://adh-web:3000;
    }

    location /adh/ {
        # 先检查是否是OPTIONS请求
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods 'GET, POST, PUT, DELETE, OPTIONS';
            add_header Access-Control-Allow-Headers 'Origin, X-Requested-With, Content-Type, Accept, Authorization, request-id, user-id';
            add_header Access-Control-Allow-Credentials 'true';
            add_header Access-Control-Max-Age 86400;
            return 204;
        }
        # 对于正常请求，添加CORS头部并代理到后端
        add_header Access-Control-Allow-Origin * always;
        add_header Access-Control-Allow-Methods 'GET, POST, PUT, DELETE, OPTIONS' always;
        add_header Access-Control-Allow-Headers 'Origin, X-Requested-With, Content-Type, Accept, Authorization, request-id, user-id' always;
        add_header Access-Control-Allow-Credentials 'true' always;
        add_header Access-Control-Max-Age 86400 always;
        proxy_pass         http://adh-api:8880;

        # WebSocket support
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }
}
